// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pks.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Param struct {
	Header               map[string]string `protobuf:"bytes,1,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body                 []byte            `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Param) Reset()         { *m = Param{} }
func (m *Param) String() string { return proto.CompactTextString(m) }
func (*Param) ProtoMessage()    {}
func (*Param) Descriptor() ([]byte, []int) {
	return fileDescriptor_c558da2cf8cb18e3, []int{0}
}

func (m *Param) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Param.Unmarshal(m, b)
}
func (m *Param) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Param.Marshal(b, m, deterministic)
}
func (m *Param) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Param.Merge(m, src)
}
func (m *Param) XXX_Size() int {
	return xxx_messageInfo_Param.Size(m)
}
func (m *Param) XXX_DiscardUnknown() {
	xxx_messageInfo_Param.DiscardUnknown(m)
}

var xxx_messageInfo_Param proto.InternalMessageInfo

func (m *Param) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Param) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*Param)(nil), "pb.Param")
	proto.RegisterMapType((map[string]string)(nil), "pb.Param.HeaderEntry")
}

func init() { proto.RegisterFile("pks.proto", fileDescriptor_c558da2cf8cb18e3) }

var fileDescriptor_c558da2cf8cb18e3 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xc8, 0x2e, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x6a, 0x65, 0xe4, 0x62, 0x0d, 0x48,
	0x2c, 0x4a, 0xcc, 0x15, 0xd2, 0xe5, 0x62, 0xcb, 0x48, 0x4d, 0x4c, 0x49, 0x2d, 0x92, 0x60, 0x54,
	0x60, 0xd6, 0xe0, 0x36, 0x12, 0xd5, 0x2b, 0x48, 0xd2, 0x03, 0x4b, 0xe9, 0x79, 0x80, 0xc5, 0x5d,
	0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0xa0, 0x8a, 0x84, 0x84, 0xb8, 0x58, 0x92, 0xf2, 0x53, 0x2a, 0x25,
	0x98, 0x14, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0x29, 0x4b, 0x2e, 0x6e, 0x24, 0xa5, 0x42, 0x02,
	0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x90, 0x08,
	0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0x2a, 0x58, 0x17, 0x67, 0x10, 0x84, 0x63, 0xc5, 0x64, 0xc1,
	0x68, 0x14, 0xcd, 0xc5, 0x1c, 0x14, 0xe0, 0x2c, 0xa4, 0xce, 0xc5, 0x1b, 0x9c, 0x99, 0x5b, 0x90,
	0x93, 0x1a, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0xc4, 0x09, 0x77, 0x85, 0x14, 0x82, 0xa9,
	0xc4, 0x20, 0xa4, 0xcd, 0xc5, 0x1b, 0x5c, 0x52, 0x94, 0x9a, 0x98, 0x4b, 0x40, 0xa1, 0x06, 0xa3,
	0x01, 0x63, 0x12, 0x1b, 0xd8, 0xbf, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0xfc, 0xf5,
	0x45, 0xfc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCClient interface {
	SimpleRequest(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Param, error)
	StreamRequest(ctx context.Context, opts ...grpc.CallOption) (RPC_StreamRequestClient, error)
}

type rPCClient struct {
	cc *grpc.ClientConn
}

func NewRPCClient(cc *grpc.ClientConn) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) SimpleRequest(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Param, error) {
	out := new(Param)
	err := c.cc.Invoke(ctx, "/pb.RPC/SimpleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) StreamRequest(ctx context.Context, opts ...grpc.CallOption) (RPC_StreamRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[0], "/pb.RPC/StreamRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCStreamRequestClient{stream}
	return x, nil
}

type RPC_StreamRequestClient interface {
	Send(*Param) error
	Recv() (*Param, error)
	grpc.ClientStream
}

type rPCStreamRequestClient struct {
	grpc.ClientStream
}

func (x *rPCStreamRequestClient) Send(m *Param) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCStreamRequestClient) Recv() (*Param, error) {
	m := new(Param)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPCServer is the server API for RPC service.
type RPCServer interface {
	SimpleRequest(context.Context, *Param) (*Param, error)
	StreamRequest(RPC_StreamRequestServer) error
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_SimpleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).SimpleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RPC/SimpleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).SimpleRequest(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_StreamRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).StreamRequest(&rPCStreamRequestServer{stream})
}

type RPC_StreamRequestServer interface {
	Send(*Param) error
	Recv() (*Param, error)
	grpc.ServerStream
}

type rPCStreamRequestServer struct {
	grpc.ServerStream
}

func (x *rPCStreamRequestServer) Send(m *Param) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCStreamRequestServer) Recv() (*Param, error) {
	m := new(Param)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleRequest",
			Handler:    _RPC_SimpleRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRequest",
			Handler:       _RPC_StreamRequest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pks.proto",
}

// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pks.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pks.proto

It has these top-level messages:
	Param
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RPC service

type RPCService interface {
	SimpleRequest(ctx context.Context, in *Param, opts ...client.CallOption) (*Param, error)
	StreamRequest(ctx context.Context, opts ...client.CallOption) (RPC_StreamRequestService, error)
}

type rPCService struct {
	c    client.Client
	name string
}

func NewRPCService(name string, c client.Client) RPCService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pb"
	}
	return &rPCService{
		c:    c,
		name: name,
	}
}

func (c *rPCService) SimpleRequest(ctx context.Context, in *Param, opts ...client.CallOption) (*Param, error) {
	req := c.c.NewRequest(c.name, "RPC.SimpleRequest", in)
	out := new(Param)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCService) StreamRequest(ctx context.Context, opts ...client.CallOption) (RPC_StreamRequestService, error) {
	req := c.c.NewRequest(c.name, "RPC.StreamRequest", &Param{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &rPCServiceStreamRequest{stream}, nil
}

type RPC_StreamRequestService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Param) error
	Recv() (*Param, error)
}

type rPCServiceStreamRequest struct {
	stream client.Stream
}

func (x *rPCServiceStreamRequest) Close() error {
	return x.stream.Close()
}

func (x *rPCServiceStreamRequest) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *rPCServiceStreamRequest) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *rPCServiceStreamRequest) Send(m *Param) error {
	return x.stream.Send(m)
}

func (x *rPCServiceStreamRequest) Recv() (*Param, error) {
	m := new(Param)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RPC service

type RPCHandler interface {
	SimpleRequest(context.Context, *Param, *Param) error
	StreamRequest(context.Context, RPC_StreamRequestStream) error
}

func RegisterRPCHandler(s server.Server, hdlr RPCHandler, opts ...server.HandlerOption) error {
	type rPC interface {
		SimpleRequest(ctx context.Context, in *Param, out *Param) error
		StreamRequest(ctx context.Context, stream server.Stream) error
	}
	type RPC struct {
		rPC
	}
	h := &rPCHandler{hdlr}
	return s.Handle(s.NewHandler(&RPC{h}, opts...))
}

type rPCHandler struct {
	RPCHandler
}

func (h *rPCHandler) SimpleRequest(ctx context.Context, in *Param, out *Param) error {
	return h.RPCHandler.SimpleRequest(ctx, in, out)
}

func (h *rPCHandler) StreamRequest(ctx context.Context, stream server.Stream) error {
	return h.RPCHandler.StreamRequest(ctx, &rPCStreamRequestStream{stream})
}

type RPC_StreamRequestStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Param) error
	Recv() (*Param, error)
}

type rPCStreamRequestStream struct {
	stream server.Stream
}

func (x *rPCStreamRequestStream) Close() error {
	return x.stream.Close()
}

func (x *rPCStreamRequestStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *rPCStreamRequestStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *rPCStreamRequestStream) Send(m *Param) error {
	return x.stream.Send(m)
}

func (x *rPCStreamRequestStream) Recv() (*Param, error) {
	m := new(Param)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
